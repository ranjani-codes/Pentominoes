{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red191\green100\blue38;
\red153\green168\blue186;\red133\green96\blue154;\red86\green132\blue173;\red88\green118\blue71;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c74902\c39216\c14902;
\csgenericrgb\c60000\c65882\c72941;\csgenericrgb\c52157\c37647\c60392;\csgenericrgb\c33725\c51765\c67843;\csgenericrgb\c34510\c46275\c27843;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 //calculate if a column is empty, if yes remove it from the distance needed\
//LEFTSIDE GRID\
//going to check if a column is empty, if yes, store the column number in an array and say = 1; 1 meaning the column is empty\
\cf4 int \cf5 [] emptycolumnL = \cf4 new int \cf5 [\cf6 position\cf5 [\cf7 0\cf5 ].\cf6 length\cf5 ]\cf4 ;\
for \cf5 (\cf4 int \cf5 i = \cf7 0\cf4 ; \cf5 i < \cf6 position\cf5 [\cf7 0\cf5 ].\cf6 length\cf4 ; \cf5 i++)\{\
    \cf4 int \cf5 posincolumn = \cf7 0\cf4 ;\
    for \cf5 (\cf4 int \cf5 j = \cf7 0\cf4 ; \cf5 j < \cf6 position\cf5 .\cf6 length\cf4 ; \cf5 j++)\{\
        \cf4 if\cf5 (\cf6 position\cf5 [j][i] == \cf7 0\cf5 )\{\
            posincolumn++\cf4 ;\
        \cf5 \}\
\
        \cf4 if\cf5 (posincolumn >= \cf6 position\cf5 .\cf6 length\cf5 )\{\
            System.
\f1\i \cf6 out
\f0\i0 \cf5 .println(\cf8 "emptycolumn"\cf5 )\cf4 ;\
            \cf5 emptycolumnL[i] = \cf7 1\cf4 ;\
        \cf5 \}\
    \}\
\}\
\cf2 //going to check how many times there is a consecutive empty column in our array\
\cf4 int \cf5 emptyL = \cf7 0\cf4 ;\
\
if\cf5 (emptycolumnL[\cf7 0\cf5 ] == \cf7 1\cf5 )\{\
    emptyL++\cf4 ;\
    for\cf5 (\cf4 int \cf5 i = \cf7 1\cf4 ; \cf5 i < emptycolumnL.\cf6 length\cf4 ; \cf5 i++)\{\
        \cf4 if\cf5 ((emptycolumnL[i] == \cf7 1\cf5 ) && (emptycolumnL[i] == emptycolumnL[i-\cf7 1\cf5 ]))\{\
            emptyL++\cf4 ;\
        \cf5 \}\
        \cf4 else if \cf5 (emptycolumnL[i] == \cf7 0\cf5 )\
            \cf4 break;\
    \cf5 \}\
\}\
\cf2 //RIGHTSIDE GRID\
\cf4 int \cf5 [] emptycolumnR = \cf4 new int \cf5 [\cf6 position\cf5 [\cf7 0\cf5 ].\cf6 length\cf5 ]\cf4 ;\
\
\cf2 //going to check if a column is empty, if yes, store the column number in an array and say = 1; 1 meaning the column is empty\
\cf4 for \cf5 (\cf4 int \cf5 i = \cf7 0\cf4 ; \cf5 i < \cf6 position\cf5 [\cf7 0\cf5 ].\cf6 length\cf4 ; \cf5 i++)\{\
    \cf4 int \cf5 posincolumn = \cf7 0\cf4 ;\
    for \cf5 (\cf4 int \cf5 j = \cf7 0\cf4 ; \cf5 j < \cf6 position\cf5 .\cf6 length\cf4 ; \cf5 j++)\{\
        \cf4 if\cf5 (\cf6 position\cf5 [j][i] == \cf7 0\cf5 )\{\
            posincolumn++\cf4 ;\
        \cf5 \}\
\
        \cf4 if\cf5 (posincolumn >= \cf6 position\cf5 .\cf6 length\cf5 )\{\
            System.
\f1\i \cf6 out
\f0\i0 \cf5 .println(\cf8 "emptycolumn"\cf5 )\cf4 ;\
            \cf5 emptycolumnR[i] = \cf7 1\cf4 ;\
        \cf5 \}\
    \}\
\}\
\cf2 //going to check how many times there is a consecutive empty column in our array\
\cf4 int \cf5 emptyR = \cf7 0\cf4 ;\
\
if\cf5 (emptycolumnR[emptycolumnR.\cf6 length\cf5 -\cf7 1\cf5 ] == \cf7 1\cf5 )\{\
    emptyR++\cf4 ;\
    for\cf5 (\cf4 int \cf5 i = emptycolumnR.\cf6 length\cf5 -\cf7 2\cf4 ; \cf5 i >= \cf7 0\cf4 ; \cf5 i--)\{\
        \cf4 if\cf5 ((emptycolumnR[i] == \cf7 1\cf5 ) && (emptycolumnR[i] == emptycolumnR[i+\cf7 1\cf5 ]))\{\
            emptyR++\cf4 ;\
        \cf5 \}\
        \cf4 else if \cf5 (emptycolumnR[i] == \cf7 0\cf5 )\
            \cf4 break;\
    \cf5 \}\
\}\
\
}